/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export const enum EncoderType {
  Opus = 0,
  Pcm = 1
}
export const enum Channels {
  Mono = 1,
  Stereo = 2
}
export const enum Application {
  Voip = 0,
  Audio = 1,
  LowDelay = 2
}
export interface EncoderConfig {
  /** Encoder type */
  type: EncoderType
  /**
   * Number of channels.
   * Used in type: Opus, Pcm
   */
  channels?: Channels
  /**
   * Opus encoder mode(application).
   * Used in type: Opus
   */
  mode?: Application
  /**
   * Synthesized frame count per one chunk.
   * Used in type: Pcm
   */
  chunkSize?: number
}
export interface SynthesisOption {
  /**
   * Frequency warping parameter alpha
   * 0.0<=all_pass_constant<=1.0.
   */
  allPassConstant?: number
  /**
   * Postfiltering coefficient parameter beta
   * Default is 0.0. 0.0<=postfiltering_coefficient<=1.0.
   */
  postfilteringCoefficient?: number
  /**
   * Speech speed
   * Default is 1.0. 0<=speech_speed_rate. Warning: Do not set a very small value as it consumes CPU time.
   */
  speechSpeedRate?: number
  /**
   * Additional half tone
   * Default is 0.0.
   */
  additionalHalfTone?: number
  /**
   * MSD threshold for Stream #1
   * Default is 0.5. 0.0<=voiced_unvoiced_threshold<=1.0.
   */
  voicedUnvoicedThreshold?: number
  /**
   * GV weight for Stream #0
   * Default is 1.0. 0.0<=weight_of_gv_for_spectrum.
   */
  weightOfGvForSpectrum?: number
  /**
   * GV weight for Stream #1
   * Default is 1.0. 0.0<=weight_of_gv_for_log_f0.
   */
  weightOfGvForLogF0?: number
  /**
   * Volume in dB
   * Default is 0.0.
   */
  volumeInDb?: number
  /** Interporation weights */
  interporationWeight?: InterporationWeight
}
export interface InterporationWeight {
  /** Duration */
  duration?: Array<number>
  /** Stream #0 */
  spectrum?: Array<number>
  /** Stream #1 */
  logF0?: Array<number>
  /** Stream #2 */
  lpf?: Array<number>
}
export interface AltJTalkConfig {
  dictionary: string
  userDictionary?: string
  models: Array<string>
  encoder: EncoderConfig
}
export class AltJTalk {
  static fromConfig(config: AltJTalkConfig): AltJTalk
  synthesize(inputText: string, option: SynthesisOption, push: (...args: [err: null, frame: Buffer] | [err: Error, frame: null]) => void): Promise<unknown>
}
